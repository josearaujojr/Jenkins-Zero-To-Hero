pipeline {
  environment {
    KUBECONFIG = '/var/lib/jenkins/.kube/config'
  }

  agent any

  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://localhost:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh """
            echo Sonar URL: ${SONAR_URL}
            echo Sonar Token: ${SONAR_AUTH_TOKEN}
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar \
              -Dsonar.login=${SONAR_AUTH_TOKEN} \
              -Dsonar.host.url=${SONAR_URL}
          """
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        REGISTRY_CREDENTIALS = credentials('docker-cred')
        IMAGE_NAME = "josearaujojr/ultimate-cicd"
      }
      steps {
        script {
          def latestTag = "${IMAGE_NAME}:latest"
          def versionTag = "${IMAGE_NAME}:${BUILD_NUMBER}"

          sh """
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${latestTag} -t ${versionTag} .
          """

          def dockerImage = docker.image("${latestTag}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
            // Também faz o push da imagem versionada
            docker.image("${versionTag}").push()
          }
        }
      }
    }

    stage('Check Access') {
      steps {
        sh 'kubectl get pods -n default'
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        sh '''
          echo Aplicando manifest...
          kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml -n default

          echo Forçando pull da imagem latest...
          kubectl rollout restart deployment/spring-boot-app -n default
        '''
      }
    }
  }
}
